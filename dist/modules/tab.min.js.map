{"version":3,"sources":["modules/tab.js"],"names":["angular","controller","provider","$scope","$element","defaults","this","self","$options","forEach","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","isUndefined","$active","key","$attrs","$navClass","$remove","index","active","activeIndex","indexOf","splice","map","$setActive","length","value","name","fn","$pane","$get","$tab","scope","require","transclude","directive","templateUrl","attr","template","link","postLink","ngModelCtrl","bsTabsCtrl","$setViewValue","$formatters","push","attrs","modelValue","bsActivePane","parsedBsActivePane","assign","$parse","$watch","newValue","oldValue","addClass","$window","$animate","$sce","title","trustAsHtml","render","$isActive","element","animation","$observe","disabled"],"mappings":"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","file":"modules/tab.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active'\r\n    };\r\n\r\n    var controller = this.controller = function($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\r\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function(pane) {\r\n        if(angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n        self.$panes.push(pane);\r\n      };\r\n\r\n      self.$remove = function(pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if(angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function(pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        }\r\n        else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if(activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function(value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n    };\r\n\r\n    this.$get = function() {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function($window, $animate, $tab, $parse) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\r\n      templateUrl: function(element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if(ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function(modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function(newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n\r\n        // Add animation class\r\n        if(bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function(newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render() {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}