{"version":3,"sources":["modules/affix.js"],"names":["angular","windowEl","$window","defaults","AffixFactory","offsetTop","$affix","inlineStyles","options","this","$get","reset","setWidth","initialAffixTop","offsetParent","match","getRequiredAffixClass","unpin","position","top","scrollTop","getScrollTop","scrollHeight","getScrollHeight","targetEl","pageYOffset","directive","document","parent","target","initialOffsetTop","offsetBottom","affixed","element","init","i","$parseOffsets","on","checkPosition","require","checkPositionWithEventLoop","dimensions","offset","destroy","style","width","off","affix","setTimeout","elementHeight","height","css","addClass","offsetUnpin","bodyEl","offsetHeight","offsetWidth","$debouncedOnResize","$onResize","initialPosition","restrict","affixTarget","$element","forEach","link","key","scope","option","$on","attr","test","controller"],"mappings":"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","file":"modules/affix.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true\r\n    };\r\n\r\n    this.$get = function($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory(element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom',\r\n            setWidth = false,\r\n            initialAffixTop = 0,\r\n            initialOffsetTop = 0,\r\n            offsetTop = 0,\r\n            offsetBottom = 0,\r\n            affixed = null,\r\n            unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          }\r\n          else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function() {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function() {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function() {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function() {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if(affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n          if(affix === 'top') {\r\n            unpin = null;\r\n            if(setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if(affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            }\r\n            else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if(setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if(setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n        };\r\n\r\n        $affix.$onResize = function() {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function() {\r\n          var initialPosition = element.css('position');\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles){\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n          }\r\n\r\n          if(options.offsetTop) {\r\n            if(options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if(options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              }\r\n              else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            }\r\n            else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if(options.offsetBottom) {\r\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            }\r\n            else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles){\r\n            element.css('position', initialPosition);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass(unpin, position, elementHeight) {\r\n\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if(scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\r\n            return 'middle';\r\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          } else {\r\n            return 'middle';\r\n          }\r\n\r\n        }\r\n\r\n        function getScrollTop() {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight() {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function($affix, $window) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink(scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function(key) {\r\n          if(angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix = $affix(element, options);\r\n        scope.$on('$destroy', function() {\r\n          affix && affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function() {\r\n    return {\r\n      controller: function($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n"],"sourceRoot":"/source/"}