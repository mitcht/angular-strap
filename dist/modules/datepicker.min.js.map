{"version":3,"sources":["modules/datepicker.js"],"names":["angular","container","provider","keyboard","this","defaults","html","delay","useNative","dateType","dateFormat","timezone","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","autoclose","minDate","Infinity","maxDate","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","overrideValidation","$get","bodyEl","isTouch","DatepickerFactory","parentScope","config","scope","$datepicker","pickerViews","views","el","selected","isNative","date","element","focus","viewDate","options","$iconLeft","$iconRight","$picker","$views","$mode","datepickerViews","$selectPane","value","$toggleMode","setMode","select","isDate","$build","length","updateDisabledDates","disabledDateRanges","dateRanges","$date","forEach","i","$dateValue","controller","$setViewValue","copy","$render","hide","keep","Date","extend","year","getFullYear","month","getDate","mode","pristine","call","$updateSelected","rows","built","$isSelected","$setDisabledEl","disabled","isDisabled","steps","targetDate","getUTCFullYear","getUTCMonth","UTC","$onMouseDown","evt","preventDefault","stopPropagation","getUTCDate","targetEl","$onKeyDown","nodeName","test","keyCode","shiftKey","altKey","$apply","updateSelected","onKeyDown","$digest","prop","init","attr","focusElement","_init","_destroy","destroy","off","_show","show","$timeout","_hide","on","blur","$element","directive","$options","$scope","require","restrict","$window","navigator","userAgent","link","falseValueRegExp","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","isMaxValid","isValid","isMinValid","isNaN","parsedDate","getTime","$parsers","unshift","viewValue","$setValidity","getDateFormattedString","formatDate","bsShow","newValue","oldValue","isDefined","key","lang","format","$dateFormatter","dateParser","$dateParser","strict","validateAgainstMinMaxDate","$watch","ngModel","getDateForAttribute","disabledDates","parse","timezoneOffsetAdjust","$formatters","isUndefined","modelValue","NaN","daySplit","arr","mod","n","m","arrays","splice","size","push","$sce","weekDaysMin","weekdaysShort","weekDaysLabelsHtml","startDate","picker","weekDaysLabels","slice","concat","split","getMonth","update","firstDayOfMonth","firstDate","getDay","today","firstDateOffset","build","day","days","isToday","toDateString","label","muted","title","showLabels","labels","time","isSelected","indexOf","newDate","name","firstMonth","months","lastDate","actualMonth","parseInt","firstYear","years","actualYear","setYear","Array","prototype"],"mappings":"AAOA,YAEAA,SAQMC,OAAW,6BAAA,oCAAA,uCAAA,2BAAAC,SAAA,cAAA,WAPf,GAQIC,GAAUC,KAAAC,UACVC,UAAM,UACNC,YAAO,aAEPC,UAAW,cACXC,YAAU,iCACVC,QAAAA,QACAC,WAAU,EACVC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,WAAAA,EACAC,SAAAA,OACAC,WAAAA,YACAC,SAAAA,KACAC,gBAAW,KACXC,UAAUC,KACVC,YAAUD,MACVE,WAAW,OACXC,iBAAS,YACTC,gBAAW,OACXC,cAAAA,EACAC,WAAU,EACVC,UAAAA,EAAAA,GACAC,UAAAA,EAAAA,GARFN,UAAW,EAWXnB,QAAK0B,EAEHL,UAAIM,EACJL,mBAAe,GACfC,SAAIK,mCACJJ,UAAIvB,oCAEJwB,mBAASI,QAVb7B,MAaM0B,MAAII,UAAcC,YAAOC,aAAAA,OAAAA,iBAAAA,kBAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAR7B,QAgBIC,GAAqBC,EAAYC,EAAAA,GA2IjCF,QAAAA,GAAmBG,GACjBA,EAAAC,SAAGC,EAAoBlC,YAAWgC,EAAAG,MAxCtC,QA0CMC,KAzCJA,EA0CI,GAAAC,QA9IJ,GAAIC,GAAWR,EAAYQ,EAAAA,QAAAA,UAAAA,EAAAA,IAC3BV,EAAcW,EAAQxB,MACtBa,EAAMY,EAAoBrB,SAC1BS,EAAMa,EAAaF,MACfG,GAAAA,YAAUb,EAAYc,WAAaC,EAAAA,QAIvChB,IAAAA,GAAgBiB,EAASV,EAlB3BN,GAmBIA,OAAmBM,EAAAA,KAlBvB,IAAIG,GAAWR,EAAYQ,QAoBzBV,GAAMkB,MAAAA,EAAc/B,UAlBtBa,EAmBIC,UAAYiB,EAAYC,SAlB5BnB,EAAMa,WAAaF,EAAQnB,SAoBzBQ,IAAAA,GAAMoB,EAAcL,OAAAf,EAAAgB,MAlBtBhB,GAmBIC,QAAYoB,SAASrB,GAlBvBC,EAAYqB,OAAOf,IAErBP,EAuBOpC,YAAQ2D,SAAOhB,GAtBpBN,EAuBIA,YAAoBM,IArB1BP,EAAMoB,YAAc,WAyBhBnB,EAAYuB,SAAOxB,EAAAgB,MAAA,GAAAf,EAAAc,OAAAU,SAGrBxB,EAAYyB,OAAAA,SAAAA,GACVf,QAAQgB,OAAAA,KAAqBC,MAAAA,EAAAA,aAC7B3B,EAAY4B,MAAO7B,EACjBpC,EAAQkE,OAAAA,KAAQ9B,EAAW+B,IAvB/B9B,EAAYuB,QAAO,IAErBvB,EA2BQrC,oBAA0BoE,SAAAA,GAC9BrB,EAAIX,mBAAqB4B,CA1B3B,KA2BIK,GAAAA,GAAWC,EAAAA,EAAAA,EAAAA,KAActE,OAAa2C,EAAL4B,EAAK5B,IACtC0B,QAAAA,QAAWG,EAAAA,KAAAA,GAAAA,EAAAA,iBAxBjBnC,EA0B8BA,OAAYoC,SAAK9B,EAAA+B,GAzBxC1E,QAAQ2D,OAAOU,EAAWD,cAAaC,EAAWD,WAAa,GAAIO,MAAKhC,KACxEP,EAAMgB,OAASsB,GAClBL,EAyBOC,cAAAtE,QAAAuE,KAAA5B,IACL3C,EAAQ4E,UAAkBC,EAAMlC,YAAKmC,GAAeC,EAAOpC,WAAiBA,EAAWqC,MAAAA,OAlBzFhF,QAAQ4E,OAAO9B,GACb+B,KAAMlC,EAAKmC,cAuBfzC,MAAYoB,EAAAA,WAEVrB,KAAMgB,EAAQ6B,YAEd5C,EAAYuB,QAAAA,EAAAA,MAAAA,GAtBZvB,EAAYuB,WAGhBvB,EA2BO6C,QAAa,SAAUhC,GAC1BA,EAAAA,MAAciC,EA1BhBjC,EAAUb,EAAYc,OAAOf,EAAMgB,OA6BnCf,EAAY+C,UA1Bd/C,EA4Bc6B,OAAQ9B,SAAMiD,GA3BtBH,KAAa,GAAQhC,EAAQoC,QAC7BJ,KAAa,GAAUhC,EAAQoC,QA8BnCjD,EAAAA,MAAYkD,KAAAA,IA3BdlD,EAAY+C,gBAAkB,WA+B5B/C,IAAAA,GAAAA,GAAYmD,EAAAA,EAAAA,EAAAA,KAAiB3B,OAASrB,EAAAA,EAAAA,IACpCA,QAAGiD,QAAWvC,EAAQwC,KAAAA,GAAWlD,IA3BrCH,EA+BQsD,YAAgBA,SAAAA,GAIpB,MAAIC,GAAAA,WAAsBjB,IAhC9BtC,EAiCoCuD,eAAWC,SAAAA,GAhC7CrD,EAgC+DuC,SAAOa,EAAWE,WAAAA,EAAAA,OA9BnFzD,EAAYiB,YAAc,SAASC,GA+B/BlB,GAAAA,GAAYuB,EAAAA,MA7BVgC,EAAa,GAAIjB,MAAKA,KAAKoB,IAAIjD,EAAS+B,MAAQc,EAAMd,MAAQ,GAAKtB,EAAOT,EAASiC,OAASY,EAAMZ,OAAS,GAAKxB,EAAO,GAgC3HlB,SAAAA,OAAY2D,GAEVC,KAAIC,EAAAA,iBACJD,MAAIE,EAAAA,cAEJxD,KAAGX,EAASoE,eA/Bd/D,EAiCOgE,UA/BThE,EAAY2D,aAAe,SAASC,GAGlC,GAFAA,EAiCII,iBAhCJJ,EAAIE,kBACAnE,EAAS,CAmCbK,GAAAA,GAAYiE,QAAa1D,QAASqD,EAAAA,OACaA,YAAxCI,EAAA,GAAAE,SAAmBC,gBACpBN,EAAAA,EAAAA,UAGJG,EAAOI,eAAgB,WAhC3BpE,EAmCaiE,WAAA,SAAAL,GAlCX,GAmCM,mBAAoBO,KAAAP,EAAAQ,WAAAR,EAAAS,WAAAT,EAAAU,OAnC1B,CAGA,GAFAV,EAAIC,iBACJD,EAAIE,kBACgB,KAAhBF,EAAIQ,QACN,MAAKrE,GAAMgB,MAGFhB,EAAMwE,OAAO,WAuCxBvE,EAASwE,QAAerE,EAAAA,MAAAA,KANdsE,EAAUb,MAAAA,EAWlBrD,GAAQkE,UAAGjE,GAtCbX,EAAY6E,WAQd,IA0CMnE,GAAQoE,EAAKC,IAzCnB5E,GA0Cc6E,KAAK,WAzCjB,MA0CItE,IAAWG,EAASoE,WAzCtBvE,EAAQoE,KAAK,OAAQ,YA2CrBI,GAAAA,IAAAA,qBAAAA,eAGEC,IACJhF,EAAYiF,KAAAA,OAAU,QACpB1E,EAAGF,KAAAA,WAAoBlC,QACrBoC,EAAQ2E,GAAAA,QAAIJ,QAEdE,MAGF,IAAIG,GAAQnF,EAAYoF,OACxBpF,GAAYoF,QAAO,WACjB/E,GAAgBE,EAAQsE,WACxBM,EAAAA,IAAAA,QAAAA,GA1CFH,IAEF,IA+CMG,GAAGzE,EAAQ5C,IA9CjBkC,GA+CQO,KAAW,YA9CZZ,GAAWY,EAAQsE,KAAK,aAAetE,EAAQsE,KAAK,cACzDM,IACAE,EAAS,WAiDLC,EAAQtF,WACZA,EAAYoC,SAAOmD,GAASC,EAAAA,aAAAA,YAAAA,EAAAA,cACtBxF,EAAAA,UACJA,EAAYyF,GAAAA,UAAa9F,EAAUsE,cAEjC1D,GAAAA,IA9CN,IAgDI+E,GAAME,EAAAA,IAiBRnF,OAhEFL,GAAYoC,KAAO,SAASoD,GAkDnBxF,EAAAA,WAhDPA,EAAYyF,SAASP,IAAIvF,EAAU,aAAe,YAAaK,EAAY2D,cAoD7E/D,EAAAA,UACAW,EAAOX,IAAAA,UAAAA,EAAAA,YAMV8F,EAAUF,KAGLnF,EA5NJ,GAcIA,IADIK,QAAUV,QAAY2F,EAAAA,SAAAA,MACd3F,8BAAY4F,KAAAA,EAAAA,UAAAA,YACxBjG,EAAWT,eAAWwB,GAAQxB,UAAawB,CAiN7CmF,OA7ME7H,GAAIiC,OAAce,EAAAA,KAAgBhB,EAAAA,oBA4MpC8F,EAAU9H,SAAAA,EACV6H,MAvDHH,UA2DShF,gBAAAA,UAAAA,SAAAA,KAAAA,iBAAAA,cAAAA,cAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GA1DV,GAAI1C,GA0DwB+B,EAAAA,SAzDxBM,EAAW,8BAA8B8D,KAAK4B,EAAQC,UAAUC,UACpE,QACEH,SAyDSnI,MAxDTkI,QAAS,UACTK,KA2DQC,SAAAA,EAAmB5F,EAAAsE,EAAA7C,GArBzB,QA2EMoE,GAAgBC,GA1EpB,MA4EIC,IAAIC,EAAgB/E,OAClBgF,EADkB,KAhE1B,QA6EIxE,GAA+ByE,GAE/B,GAAGC,QAAS1E,OAAAA,GAAZ,CA7EF,GAAI2E,GAAaC,MAAMJ,EAAWb,SAAS5G,UAAY8H,EAAWC,WAAaN,EAAWb,SAAS5G,QAiFnGiD,EAAW+E,MAASC,EAAQrB,SAASsB,UAAAA,EAAAA,WAAAA,EAAAA,SAAAA,QAE/B3G,EAAAA,GAAAA,CAIJ0B,GAAIhE,aAASwB,OAAAA,GAnFfwC,EAoFWiF,aAAAA,MAAAA,GAnFXjF,EAAWkF,aAAa,MAAOT,GAuF7BC,IAAIO,EAAWlF,WAAA8E,IAlCnB,QAASM,KACP,OAAQnF,EAAWD,YAAc6E,MAAM5E,EAAWD,WAAW+E,WAAa,GAAKM,EAAWpF,EAAWD,WAAYrB,EAAQrC,YApDzHV,GAAAA,IACEoC,MAAGpC,EAKLkH,SAAKwC,SAAUtH,WAAa8E,cAAa,aAASyC,eAAUC,YAAAA,YAAAA,QAAAA,UAAAA,OAAAA,YAAAA,YAAAA,WAAAA,aAAAA,WAAAA,kBAAAA,YAAAA,eAAAA,YAAAA,YAAAA,YAAAA,OAAAA,YAAAA,UAAAA,WAAAA,YAAAA,qBAAAA,KAAAA,cAAAA,eAAAA,SAAAA,GAC1D5J,QAAI6I,UAAe7I,EAAAA,MAAQ6J,EAAUF,GAAWzC,EAAA4C,KA5DpD,IA8DIH,GAAoBd,eA7DxB7I,SAAQkE,SAAU,OAAQ,YAAa,YAAa,aAAe,SAAS4F,GAiEtEjB,QAAAA,UAAaxG,EAAYO,KAASyB,EAAYtB,KAAAA,EAAAA,MAAAA,EAAAA,IAAAA,KAGlDmE,EAAGxE,QAAAA,EAAYK,OAAQvC,EAAAA,OAAWuC,SAAQrC,EAAakJ,GAEnDG,GAAeA,QAAAA,UAAAA,KAEfN,QAAAA,SAAaE,KAAeK,IAAAA,EAAAA,MAAAA,2BAC9BL,KAAOM,EAAAA,EAAeR,OAAiBO,EAAQD,SAGjD,IAAIG,GAAaC,EAAAA,EAAAA,EAAAA,EAnEnBpH,GAmEwCA,EAAQrC,SAAYqJ,GAAMA,EAAAA,YAAAA,EAAAA,WAAAA,aAjElE,IAiEwEK,GAAQrH,EAAQ7B,KAhEpFuI,EAAa,SAAS9G,EAAMqH,GAmE9BhK,MAAQkE,GAASuF,WAAW9G,EAAAqH,EAAYD,IAIpClB,EAAWb,GAnEfgC,OAqEKf,EAAMJ,WApEXkB,KAqEIM,EApEJD,OAAQrH,EAAQ7B,cAyEhBkB,SAAMkI,SAAYC,UAAS,WAASZ,SAAUC,GAC5Cf,QAAAA,UAAkBxE,EAAAA,KAAWD,EAAAA,SAAAA,EAAAA,SAAAA,GAC5ByE,EAAAb,SAAA8B,GAAAI,EAAAM,oBAAAV,EAAAH,IAIHV,MAASP,EAAAA,SAAoBC,KAAAA,EAAAA,QAAAA,GAC3B0B,EAAuBxG,EAAeO,gBAIxChC,EAAIpC,OAAQ6J,EAAAA,QAAeY,SAAAA,EAAgBb,GACzCxH,EAAMkI,OAAYG,EAAAA,cA1EnB,GAKCzK,QAAQ6J,UAAU3C,EAAKuD,gBACzBrI,EAAMkI,OAAOpD,EAAKuD,cAAe,SAAS7B,EAAgBH,GA8E1DG,EAASyB,EAA0BnB,GACjCT,EAAa9E,EAAoB8E,GAC7BO,GACAF,EAAAA,oBAA8Bd,KA/DtC3D,EAyFa+E,SAAAC,QAAA,SAAAC,GAxFX,GAAI3G,EA0FF,IAAkC2G,SAA9BJ,EAAAA,oBAAyC7E,YAAWD,QAAAA,EACxD,MAAI8E,EAvFN,KA2FII,EAEAe,MA5FFhG,GA2FOkF,aAAA,QAAA,GACLc,IAGF,IAAGtH,GAAQtC,EAAaiK,MAAApB,EAAUjF,EAAAD,WA3FpC,QA4FIzB,GAAOuH,MAAWS,EAAAA,eAClBtG,GAAOoF,aAAiB1G,QAAQnC,IAGlCyJ,EAAwBnB,GAENzI,WA5FhBsC,EA4FQA,UACRJ,EAAOA,EAAKwG,qBAAYD,EAAAnG,EAAApC,UAAA,GACnB8I,EAAWhJ,EAAAA,EAAaG,iBAAOmC,EAAArC,cA1FxCiC,EA4FSuH,EAAAS,qBAAAtG,EAAAD,WAAArB,EAAApC,UAAA,GACWgC,WAAhBI,EAAOtC,SA3FFkC,EAAKwG,UACkB,SAArBpG,EAAQtC,SA+FRmK,EAAAA,UAAiB,IAEtBjI,QAAAA,EAAAA,SACD3C,EAAQ6K,cAEJ,GAAG7K,MAAAA,OA5FdqE,EA+Fa6F,YAAWQ,KAAMI,SAAAA,GA9F5B,GAAInI,EAaJ,OAXEA,GA8FEA,QAAOkI,YAASC,IAAa,OAAAA,EACxBC,EAAAA,EACE/K,QAAS8K,OAAAA,GA9FXA,EAqGiBZ,WAAb9F,EAAAA,SACJoF,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,iBAIEhF,GAAAA,MAvGqB,SAArBzB,EAAQtC,SAuGE,IAAV+D,EApGOsG,GA0GhBzG,EAAQA,WAAWD,EAAc6E,qBAAiB7E,EAAW+E,EAAAA,UAvGxDK,MAETnF,EA0GOwE,QAAYA,WACf9F,EAAAA,IAAUyG,MASjBtJ,EAAAA,IAAS,WAAA,WAEJG,GAAgBA,EAAAA,UAClBQ,EAAW,KACXmK,EAAU,YAMV9K,SAAM+K,kBAAgB,WAOxB,QAASC,GAAIC,EAAGC,GAjHhB,IAkHE,GAAAC,MAlHKJ,EAAIpH,OAAS,GAqHpBzD,EAAK0B,KAAAmJ,EAAAK,OAAA,EAAAC,GAlHL,OAsHQnJ,GApHV,QAuHU2H,GAAAA,EAAOhH,GAtHf,OAuHQ0G,EAAAA,EAAAA,GAAa2B,EAlBVI,KAASF,UAhHpBzK,UAAW,KAkHTmK,SAAOK,EArGXjL,MAAK0B,MAAS,iBAAkB,cAAe,OAAQ,SAASmI,EAAgBE,EAAasB,GAC3F,MAuHQvB,UAAAA,GAtHN,GAsHgCF,GAAQjH,EAAQrC,OAAYqJ,EAAMA,EAAAA,SAAMK,EAAQrH,EAAQ7B,KAnHpFuI,EAAa,SAAS9G,EAAMqH,GAqH9B,MAAI0B,GAAczB,WAAe0B,EAAAA,EAAc5B,IAE3C6B,EAAAA,GAEJ5B,OAAI6B,EAAYC,WAChB/B,KAAIjH,EAAY+B,OAAMgH,EAAU/G,eAA4CnC,EAAgBqC,EAAAA,cAAAA,GAjH1F+G,EAAiBL,EAAYM,MAAMjJ,EAAQtB,WAAWwK,OAAOP,EAAYM,MAAM,EAAGjJ,EAAQtB,YAmHxFc,EAAAA,EAAAA,YAAAA,+BAAAA,EAAAA,KAAAA,qCAAAA,SACAyH,EAAQjH,EAAQlC,QAAAA,EAAAA,UAAAA,EAAAA,oBAAAA,YAAAA,EAAAA,WAAAA,GAAAA,OAChBqL,GACAvG,KAAAA,EAAAA,cAjHJZ,MAiHaA,EAAOoH,WAhHpBxJ,KAAMkJ,EAAU7G,WAkHVzC,IA/GNyH,OAgHQhK,EAAQ4E,UA/GhBsH,MA+GkCrH,EA9GlCc,OACEZ,MA6GkGpC,GA3GpGyJ,OA4GQN,SAAOlI,EAAAA,IA3GRxD,KA4GMkF,OAAQN,GAAAA,EAAclC,gBAAiBH,EAAKqC,MAAcrC,EAAGwJ,aAAArJ,EAAAiC,OAKlEjC,QAAAA,OAASH,GACTmJ,KAAO1G,EAAAA,MAAAA,cA/GTL,MAAO+G,EAAO7H,MAAMkI,WACpBxJ,KAAMmJ,EAAO7H,MAAMe,YAkHnB8G,EAAIO,WACAC,EAAYtH,YAAUqH,EAAAA,MAAsCE,IAApBrB,EAAImB,aAChDvJ,EAAI0J,KAAQtC,EAAWS,MAAAA,UAEvBmB,EAAGW,oBA9GTC,MAiHQC,WAhHN,GAiHMC,GAAKpB,GAAAA,MAAAA,EAAAA,KAAAA,EAAAA,MAAAA,GAAAA,EAAAA,EAAAA,oBAAM7I,EAAMgK,GAAAA,OAAAA,EAAAA,MAAAA,EAAAA,EAAAA,SAAAA,EAAAA,UAAAA,IAAAA,EAAAA,EAAAA,oBAAKE,EAAAA,EAAaC,qBAAmBN,GAAAA,MAAAA,EAAAA,UAAAA,cAAOO,KAAkBJ,IAAU3C,EAAAA,GAAAA,OAAAA,EAAAA,KAAAA,EAAAA,IA5G/F,KA4GwJgD,GAAtClB,GAAVrJ,KAAgDuK,EAAOL,EAAIR,GAAAA,EAAAA,IA3GjKQ,EA2GgMlH,EAAeC,qBAAWiH,GAAAA,MAAAA,EAAAA,cAAAA,EAAAA,WAAAA,EAAAA,UAAAA,IA1G1NC,EAAKpB,MACH7I,KAAMgK,EA2GNvK,QAAM6K,EAAQxD,iBAAW4C,EACzBjK,MAAM8K,EAAaP,EAAAvM,KAAA4J,QACnB5H,SAAM+K,EAASvB,OAAAA,KAAAA,WAAAA,GACfxJ,MAAMiD,EAAO6G,aAAiBA,EAAAA,MAC9B9L,SAAaA,KAAAsF,WAAAiH,IAGbvK,GAAA6K,MAAchJ,EAAStB,EAAKmC,EAAkBgH,kBAzGlD1J,EAAM8K,YAAa,EA2GjBxH,EAAAA,OAAYkG,EACVxJ,EAAIgL,KAAOzK,EAAKwG,EAAAA,KAAAA,OAGhB/I,KAAIgN,OAAOrK,GA1GjBsK,WAgHUtK,SAAQgB,GA/GhB,MAgHW+H,GAAI3H,OAAWpB,EAAAA,gBAAQgB,EAAmBF,MAAQM,eAAKxB,EAAAwJ,aAAAL,EAAA7H,MAAAkI,YAAAxJ,EAAAqC,YAAA8G,EAAA7H,MAAAe,WA9GpEU,WAgHY,SAAO/C,GA/GjB,GAAIyK,GAAOzK,EAAKwG,SAChB,IAAIiE,EAAOrK,EAAQ3B,SAAWgM,EAAOrK,EAAQzB,QAAS,OAAO,CAC7D,IAA0D,KAAtDyB,EAAQrB,mBAAmB4L,QAAQ3K,EAAK4J,UAAkB,OAAO,CAkHjE,IAAAxJ,EAAOgB,mBAhHT,IAAK,GAAII,GAAI,EAAGA,EAAIpB,EAAQgB,mBAAmBF,OAAQM,IAkHvD2C,GAAAA,GAAW/D,EAASkD,mBAAAA,GAAAA,OAAAA,GAAAA,EAAAA,mBAAAA,GAAAA,IACb6F,OAAO7H,CAIZ,QAAIsJ,GA/GVzG,UAsHW1G,SAAKsF,GArHd,GAAKoG,EAAO7H,MAAZ,CAyHE+F,GACAkC,GADAlC,EAAgBlJ,EAAAA,MAAAA,SAEhB6E,MAAAA,EAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,OAAAA,KAAAA,EAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,QAAAA,KAAAA,EAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,OAAAA,KAAAA,EAAAA,UAAAA,EAAAA,GAAAA,MAAAA,EAAAA,SAASd,KAAMa,WAAA6H,IAAAzB,EAAApI,OAAA6J,GAAA,OAlHnBC,KAoHM,QAnHNxD,OAoHQhK,EAAQ4E,YAnHhBsH,MAmHkCrH,EAlHlCc,OACEd,KAiHkGlC,GA/GpGyJ,OAgHQN,SAAOlI,EAAAA,GA/GRxD,KAgHMkF,OAAQ6G,EAAAA,gBAAwBpH,EAAOF,KAzGvClC,EAAKwJ,aAAerJ,EAASiC,QA8GtC2H,QAAO9H,OAAA9B,GACD2K,MAAAA,EAAaxJ,MAAIU,WACjB+I,KAAAA,EAAa3I,MAAAA,YAEfA,EAAAA,oBARA/E,QAAQ4E,OAAO9B,GAAWiC,KAAAA,EAAO+G,MAAO7H,cAAkBtB,MAAMmJ,EAAO7H,MAAMe,WA7G/ErC,KAAMmJ,EAAO7H,MAAMe,YAErB8G,EAAOlI,WASX8I,MA2GkCK,WAxGhC,IAAK,GAwGiH3M,GAAVqF,GAA3BqG,GAAOvG,MAAAA,EAAYR,KAAAA,EAAAA,OAxG3FZ,EAAI,EAAO,GAAJA,EAAQA,IACtBY,EAAQ,GAAIJ,MAAK7B,EAAS+B,KAAMV,EAAG,GAyGjC/B,EAAM6K,MACN7K,KAAM8K,EACN9K,MAAMiD,EAAaqI,EAAQtN,KAAK8L,QAChC9L,SAAa0L,EAAAvG,YAAAR,GAvGbU,SAAUrF,KAAKsF,WAAWX,IAG9B3C,GAAM6K,MAAQxD,EAAW1E,EAAOhC,EAAQ9B,iBAyGtCyE,EAAAA,YAAqB/C,EACnBP,EAAIuL,KAAAA,EAAYD,EAAS/K,KAAKmC,OAC9B1E,KAAAkF,OAAOqI,GAET7G,WAAW,SAASb,GAClB,MAAK6F,GAAO7H,OAAOtB,EAAAmC,gBAAAgH,EAAA7H,MAAAa,eAAAnC,EAAAwJ,aAAAL,EAAA7H,MAAAkI,YAtGzBzG,WAAY,SAAS/C,GAyGf,GAAIiL,IAAAA,GAAc9B,MAAO7H,EAAAA,cAAMkI,EAAAA,WAAAA,EAAAA,EAC/B,OAAIoB,GAAc5I,EAAKmH,SAAO7H,EAAAA,UAAAA,EAAAA,SAtGpC6C,UA6GW1G,SAAKsF,GA5Gd,GAAKoG,EAAO7H,MAAZ,CAgHE+F,GAAAA,GAAgBjJ,EAAAA,MAAAA,WAChBmL,EAAO,GAAAvH,MAAAmH,EAAA7H,MACP0B,MAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,SAAAA,EAAAA,SAAAA,EAAAA,GAASd,KAAMa,WAAA6H,IAAAzB,EAAApI,OAAA6J,GAAA,OAzGnBC,KA2GM,OA1GNxD,OA2GQhK,EAAQ4E,WA1GhBsH,MA0GkCrH,EAzGlCc,OACEd,KAwGkGlC,IAtGpGyJ,OAuGQN,SAAOlI,EAAAA,IAtGRxD,KAuGMkF,OAAQR,GAAAA,SAAkBhC,EAAAA,cAAe,GAAA,MAAA+K,SAAA/K,EAAA+B,KAAA,GAAA,KAC9C7E,QAAQ4E,OAAO9B,GAAW+B,KAAMiH,EAAO7H,MAAMa,cAAeC,MAAO+G,EAAO7H,MAAMkI,WAAYxJ,KAAMmJ,EAAO7H,MAAMe,YAC/G8G,EAAO1G,UAlGFzC,EAAKmC,gBAAkBhC,EAAS+B,OACzC7E,QAAQ4E,OAAO9B,GAoGf4J,KAAOZ,EAAA7H,MAAAa,cACDgJ,MAAAA,EAAYhL,MAAAA,WACZiL,KAAAA,EAAYlJ,MAAAA,YAEdA,EAAOO,oBAhGfsH,MAiGgCK,WA9F9B,IAAK,GA8F6G3M,GAA9CqC,EAAUqJ,EAAOvG,KAAAA,EAAYV,MAAAA,EAAAA,KAAAA,OAAOY,KA9F/FtB,EAAI,EAAO,GAAJA,EAAQA,IACtBU,EAAO,GAAIF,MAAKmJ,EAAY3J,EAAG,EAAG,GA+FhC/B,EAAM6K,MACN7K,KAAM8K,EACN9K,MAAMiD,EAAa0I,EAAO3N,KAAK8L,QAC/B9L,SAAa0L,EAAAvG,YAAAV,GA7FbY,SAAUrF,KAAKsF,WAAWb,IAG9BzC,GAAM6K,MAAQc,EAAM,GAAGhB,MAAQ,IAAMgB,EAAMA,EAAMlK,OAAS,GAAGkJ,MA+F3DrH,EAAAA,YAAqB/C,EACnBP,EAAIuL,KAAAA,EAAYI,EAASpL,KAAKmC,OAC9B1E,KAAAkF,OAAOqI,GAET7G,WAAW,SAASb,GAClB,MAAK6F,GAAO7H,OAAOtB,EAAAmC,gBAAAgH,EAAA7H,MAAAa,eA5FzBY,WAAY,SAAS/C,GA+Ff,GAAIqL,IAAAA,GAAalC,MAAO7H,EAAMa,cAC1ByI,EAAAA,EAAAA,EAEJ,OAAGtH,GAAIQ,EAAgB8G,SAAQU,EAAQD,UAAajL,EAC/CzB,SA/FXwF,UAAW,SAASb,GAClB,GAAK6F,EAAO7H,MAAZ,CAwGAnB,GAAAA,GAAUA,EAAAA,MAAAA,cAAAA,EAAAA,GAAAA,MAAAA,EAAAA,MApGU,MAAhBmD,EAAIQ,QAAgB8G,EAAQU,QAAQD,EAAa,GAA6B,KAAhB/H,EAAIQ,QAAgB8G,EAAQU,QAAQD,EAAa,GAA6B,KAAhB/H,EAAIQ,QAAgB8G,EAAQU,QAAQD,EAAa,GAA6B,KAAhB/H,EAAIQ,SAAgB8G,EAAQU,QAAQD,EAAa,GAC1O5N,KAAKsF,WAAW6H,IAAUzB,EAAOpI,OAAO6J,GAAS,MAG1D,QACEhL,MAAOQ,EAAQvB,QAAU0M,MAAMC,UAAUnC,MAAM7G,KAAK5C,EAAOQ,EAAQvB,SAAWe,EAC9EO,SAAUA","file":"modules/datepicker.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.datepicker', [\r\n  'mgcrea.ngStrap.helpers.dateParser',\r\n  'mgcrea.ngStrap.helpers.dateFormatter',\r\n  'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$datepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      //uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right',\r\n      overrideValidation: 'false'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory(element, controller, config) {\r\n\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if(options.startView) options.startView -= options.minView;\r\n\r\n        // View vars\r\n\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        scope.$mode = options.startView;\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date) {\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function(value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function() {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function(date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function(dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function(date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\r\n          if(!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if(options.autoclose && !keep) {\r\n              $timeout(function() { $datepicker.hide(true); });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        $datepicker.setMode = function(mode) {\r\n          // console.warn('$datepicker.setMode', mode);\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $datepicker.$build = function(pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if(pristine === true && $picker.built) return;\r\n          if(pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function() {\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], updateSelected);\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function(date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function(el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function(value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $datepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if(evt.keyCode === 13) {\r\n            if(!scope.$mode) {\r\n              return $datepicker.hide(true);\r\n            } else {\r\n              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\r\n            }\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          $picker.onKeyDown(evt);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function updateSelected(el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $datepicker.init;\r\n        $datepicker.init = function() {\r\n          if(isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if(isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $datepicker.destroy;\r\n        $datepicker.destroy = function() {\r\n          if(isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $datepicker.show;\r\n        $datepicker.show = function() {\r\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if(!$datepicker.$isShown) return;\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $datepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $datepicker.hide;\r\n        $datepicker.hide = function(blur) {\r\n          if(!$datepicker.$isShown) return;\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    var defaults = $datepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!datepicker || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n          newValue === true ? datepicker.show() : datepicker.hide();\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n            // Build only if dirty\r\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\r\n            validateAgainstMinMaxDate(controller.$dateValue);\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges(ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate(parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if(isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n\r\n          // If the model needs to be updated to matter what, these validation routines\r\n          // can be overridden by setting the attribute overrideValidation eq true\r\n          if (defaults.overrideValidation === 'true' && viewValue instanceof Date === false){\r\n            return viewValue;\r\n          } \r\n\r\n          // Null values should correctly reset the model value & validity\r\n          if(!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if(!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          } else {\r\n            validateAgainstMinMaxDate(parsedDate);\r\n          }\r\n\r\n          if(options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if(options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if(options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if(options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          } else {\r\n            return new Date(date);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if(angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if(angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if(options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if(options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString() {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if(datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .provider('datepickerViews', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      dayFormat: 'dd',\r\n      daySplit: 7\r\n    };\r\n\r\n    // Split array into smaller arrays\r\n    function split(arr, size) {\r\n      var arrays = [];\r\n      while(arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod(n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function(picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\r\n\r\n        var views = [{\r\n            format: options.dayFormat,\r\n            split: 7,\r\n            steps: { month: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n                // in $datepicker.$selectPane, so picker would not update selected day display if\r\n                // user picks first day of the new month.\r\n                // As a workaround, we are always forcing update when picked date is first day of month.\r\n                viewDate.date = picker.$date.getDate();\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\r\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n              // Handle daylight time switch\r\n              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n              var days = [], day;\r\n              for(var i = 0; i < 42; i++) { // < 7 * 6\r\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\r\n              }\r\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n              scope.showLabels = true;\r\n              scope.labels = weekDaysLabelsHtml;\r\n              scope.rows = split(days, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\r\n            },\r\n            isDisabled: function(date) {\r\n              var time = date.getTime();\r\n\r\n              // Disabled because of min/max date.\r\n              if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n              // Disabled due to being a disabled day of the week\r\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n              // Disabled because of disabled date range.\r\n              if (options.disabledDateRanges) {\r\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                    return true;\r\n                  }\r\n                }\r\n              }\r\n\r\n              return false;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualTime = picker.$date.getTime();\r\n              var newDate;\r\n\r\n              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\r\n              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\r\n              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\r\n              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'month',\r\n            format: options.monthFormat,\r\n            split: 4,\r\n            steps: { year: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstMonth = new Date(viewDate.year, 0, 1);\r\n              var months = [], month;\r\n              for (var i = 0; i < 12; i++) {\r\n                month = new Date(viewDate.year, i, 1);\r\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\r\n              }\r\n              scope.title = formatDate(month, options.yearTitleFormat);\r\n              scope.showLabels = false;\r\n              scope.rows = split(months, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualMonth = picker.$date.getMonth();\r\n              var newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'year',\r\n            format: options.yearFormat,\r\n            split: 4,\r\n            steps: { year: 12 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n              var years = [], year;\r\n              for (var i = 0; i < 12; i++) {\r\n                year = new Date(firstYear + i, 0, 1);\r\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\r\n              }\r\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n              scope.showLabels = false;\r\n              scope.rows = split(years, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualYear = picker.$date.getFullYear(),\r\n                  newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}