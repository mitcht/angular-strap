{"version":3,"sources":["modules/typeahead.js"],"names":["angular","trigger","provider","container","this","defaults","keyboard","html","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","bodyEl","$typeahead","options","scope","$scope","$matches","extend","config","$resetMatches","$$postDigest","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$$rAF","value","controller","$render","$emit","prefixEvent","parentScope","length","l","isString","$viewValue","i","preventDefault","stopPropagation","keyCode","$digest","show","$timeout","$element","$onMouseDown","hide","on","$onKeyDown","element","TypeaheadFactory","array","isFunction","then","$$phase","$window","document","body","$filter","expression","directive","results","restrict","require","link","falseValueRegExp","attr","key","bsOptions","test","parsedOptions","$parseOptions","typeahead","watchOptions","watchedOptions","$watchCollection","values","$match","replace","trim","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","isVisible","slice","$formatters","displayValue","push","modelValue","selected","val","destroy","isDefined","label","isObject","toString","$on"],"mappings":"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","file":"modules/typeahead.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      function TypeaheadFactory(element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n\r\n        scope.$resetMatches = function() {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function(index) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function(index, evt) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function() {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function(matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function(index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function(index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function() {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $typeahead.$getIndex = function(value) {\r\n          var l = scope.$matches.length,\r\n            i = l;\r\n          if (!l) return;\r\n          for (i = l; i--;) {\r\n            if (scope.$matches[i].value === value) break;\r\n          }\r\n          if (i < 0) return;\r\n          return i;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function(evt) {\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === 13 && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          else if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n          else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n          else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function() {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function() {\r\n            $typeahead.$element && $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element && element.on('keydown', $typeahead.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function() {\r\n          $typeahead.$element && $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element && element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect)\r\n            $typeahead.activate(-1);\r\n          hide();\r\n        };\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function($filter) {\r\n    return function(array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function(results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      } else {\r\n        return $filter('filter')(array, expression, comparator);\r\n      }\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function(key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue'], function(key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        element.attr('autocomplete', 'false');\r\n\r\n        // Build proper bsOptions\r\n        var filter = options.filter || defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\r\n        if (comparator) bsOptions += ':' + comparator;\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function(values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function(values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              var isVisible = typeahead.$isVisible();\r\n              isVisible && typeahead.update(values);\r\n              // Do not re-queue an update if a correct value has been selected\r\n              if (values.length === 1 && values[0].value === newValue) return;\r\n              !isVisible && typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (modelValue && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function() {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}