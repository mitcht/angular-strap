{"version":3,"sources":["modules/timepicker.js"],"names":["angular","container","provider","keyboard","this","defaults","html","delay","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","length","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","overrideValidation","isNative","isTouch","lang","$get","$timepicker","$tooltip","element","extend","config","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","select","end","start","setSelectionRange","isUndefined","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","focus","_init","init","parentScope","floorMinutes","time","options","scope","floor","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","controller","$dateValue","hoursFormat","$dateFormatter","$iconUp","$iconDown","$select","$moveIndex","value","index","$switchMeridian","switchMeridian","isDate","isNaN","getMinutes","getTime","$build","minute","$setViewValue","$timeout","keep","hide","Date","setHours","setMinutes","setSeconds","copy","$render","hours","midIndex","push","label","selected","$isSelected","disabled","i","minutes","seconds","minutesFormat","rows","showSeconds","secondsFormat","$isDisabled","showAM","timeSeparator","$date","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","parseInt","targetDate","$onMouseDown","evt","target","nodeName","stopPropagation","targetEl","triggerHandler","preventDefault","$onKeyDown","test","keyCode","sepLength","lateralMove","count","minutesLength","selectRange","hoursLength","incr","isSeconds","isMeridian","secondsLength","createSelection","$digest","createTextRange","prop","attr","_destroy","destroy","off","_show","show","_hide","blur","$element","directive","$options","require","restrict","$window","navigator","userAgent","link","falseValueRegExp","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","bsShow","newValue","oldValue","timepicker","isDefined","key","forEach","dateParser","$dateParser","$observe","validateAgainstMinMaxTime","$watch","ngModel","getTimeForAttribute","parse","timezoneOffsetAdjust","$formatters","modelValue","NaN","$on"],"mappings":"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","file":"modules/timepicker.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      //uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager',\r\n      overrideValidation: 'false'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory(element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes(time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format),\r\n          timeSeparator = $dateFormatter.timeSeparator(format),\r\n          minutesFormat = $dateFormatter.minutesFormat(format),\r\n          secondsFormat = $dateFormatter.secondsFormat(format),\r\n          showSeconds = $dateFormatter.showSeconds(format),\r\n          showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function(value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function(date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function(date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function(date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function() {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function(date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function() {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [],\r\n            hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [],\r\n            minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [],\r\n            second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function(date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function(date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function(value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function(value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function(value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours(),\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes(),\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds(),\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection(start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function() {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function() {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function() {\r\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            $timepicker.$element && $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element && element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function(blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          $timepicker.$element && $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element && element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function(key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if (!timepicker || !angular.isDefined(newValue)) return;\r\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n          newValue === true ? timepicker.show() : timepicker.hide();\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\r\n            validateAgainstMinMaxTime(controller.$dateValue);\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime(parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n\r\n          // If the model needs to be updated to matter what, these validation routines\r\n          // can be overridden by setting the attribute overrideValidation eq true\r\n          if (defaults.overrideValidation === 'true' && viewValue instanceof Date === false){\r\n            return viewValue;\r\n          } \r\n\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          } else {\r\n            validateAgainstMinMaxTime(parsedTime);\r\n          }\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          } else {\r\n            return new Date(date);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString() {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}