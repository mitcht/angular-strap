{"version":3,"sources":["modules/button.js"],"names":["angular","defaults","this","activeClass","directive","restrict","require","compile","children","querySelectorAll","childEl","element","ngModel","attr","removeAttr","forEach","child","$button","constantValueRegExp","options","isInput","trueValue","link","scope","controller","falseValue","test","isDefined","hasExoticValues","viewValue","$formatters","push","$render","modelValue","isActive","equals","checked","activeElement","bind","toggleEvent","$modelValue","$$rAF","$setViewValue","toggleClass","$apply","hasClass","$observe","value","nodeName"],"mappings":"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","file":"modules/button.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass:'active',\r\n      toggleEvent:'click'\r\n    };\r\n\r\n    this.$get = function() {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function() {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink(element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function(child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if(constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if(constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if(hasExoticValues) {\r\n          controller.$parsers.push(function(viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function(modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n             return angular.equals(modelValue, trueValue);\r\n          });\r\n          // Fix rendering for exotic values\r\n          scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n            controller.$render();\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$modelValue, trueValue);\r\n          $$rAF(function() {\r\n            if(isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function() {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if(!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            if(!hasExoticValues) {\r\n              controller.$render();\r\n            }\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function() {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink(element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function(child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function(v) {\r\n          value = constantValueRegExp.test(v) ? scope.$eval(v) : v;\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$modelValue, value);\r\n          $$rAF(function() {\r\n            if(isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function() {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}