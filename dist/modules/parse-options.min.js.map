{"version":3,"sources":["modules/parse-options.js"],"names":["angular","module","options","config","$parseOptions","$values","regexp","match","this","$get","$match","attr","displayFn","label","value","index","locals","valueName","scope","valueFn","ParseOptionsFactory","groupByFn","valuesFn","$parse","defaults","keyName","controller","when","values","$q","then","displayValue","init"],"mappings":"AAOA,YAEAA,SAQQC,OAAIC,0CAAuCC,SAAAA,gBAAAA,WAPjD,GAQMC,GAAAA,KAAcC,UAPlBC,OAUQC,+KARVC,MAAKC,MAWGL,SAAcM,KAASH,SAAQI,EAAKJ,GAV1C,QAWMK,GAAyBD,EAAMJ,GAcnC,QAmBcM,GAAOA,EAAAA,GAlBnB,MAkB0BC,GAAOA,IAAAA,SAAAA,EAAAA,GAjB/B,GAiB6CC,GAAAA,EAAPA,IAIxCX,OApBEY,GAAOC,GAAaV,EACpBM,EAAQD,EAAUM,EAAOF,GACzBF,EAAQK,EAAQD,EAAOF,IAmBzBH,MAAOT,EAhBHU,MAAOA,EAoBNM,MAAAA,KApDP,GAaIC,MAEAC,EAAWC,QAAOhB,UAAMiB,EAAArB,EAb5BC,GAAcC,UAgBZD,IAAAA,GAAAA,EAAckB,EAAWG,EAAgBC,EAAAA,EAAAA,CAoB3C,OAlCAtB,GAecuB,KAAKL,WAdjBlB,EAgBQJ,OAAgB4B,EAAAA,EAASrB,MAAAL,EAAAI,QAfjCM,EAgBMgB,EAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAfNP,EAAYE,EAAOhB,EAAM,IAAM,IAAKY,EAAUI,EAAOhB,EAAM,GAAKA,EAAM,GAAKU,GAC3EK,EAgBIlB,EAAcC,EAAAA,KAdpBD,EAAckB,SAAW,SAASJ,EAAOQ,GACvC,MAAOG,GAAGF,KAAKL,EAASJ,EAAOQ,IAAaI,KAAK,SAASF,GAKxD,MAaFxB,SAAc2B,QAAAA,KACRb,MAEJd,EAAOQ,QAAUM,EAAAA,OAAAA,EAAAA,EAAAA,MAhBVd,EAAcC,WAGzBD,EAoBUY,aAAoBF,SAAAA,GAnB5B,GAoBIE,KAlBJ,OADAE,GAoBIL,GAAQD,EACRE,EAAQK,IALdf,EAAc4B,OACP5B,EAET,MAAOgB","file":"modules/parse-options.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function($parse, $q) {\r\n\r\n      function ParseOptionsFactory(attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\r\n\r\n        $parseOptions.init = function() {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]),\r\n          valueName = match[4] || match[6],\r\n          keyName = match[5],\r\n          groupByFn = $parse(match[3] || ''),\r\n          valueFn = $parse(match[2] ? match[1] : valueName),\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function(scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function(values) {\r\n            if(!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function(modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues(values, scope) {\r\n          return values.map(function(match, index) {\r\n            var locals = {}, label, value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}