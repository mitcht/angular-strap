{"version":3,"sources":["modules/popover.js"],"names":["angular","templateUrl","provider","contentTemplate","defaults","trigger","keyboard","html","title","content","delay","autoClose","this","$get","options","$popover","PopoverFactory","element","config","$tooltip","restrict","directive","requestAnimationFrame","$window","link","scope","setTimeout","falseValueRegExp","attr","dataTarget","key","isDefined","forEach","$observe","oldValue","popover","target","test","bsPopover","$watch","isObject","newValue","extend","$applyPlacement","show","hide","setViewport","viewport","$on","destroy"],"mappings":"AAOA,YAEAA,SAMMC,OAAAA,0BAAa,2BAAAC,SAAA,WAAA,WALjB,GAMIC,GAAAA,KAAiBC,UACjBC,UAAS,UACTC,YAAU,GACVC,WAAM,EACNC,QAAO,EACPC,UAAS,QACTC,YAAO,2BACPC,iBAAW,EALbN,QAAS,QAQTO,UAAKC,EAEHN,MAAA,EAPFC,MAUQM,GATRL,QAWQM,GAVRL,MAaOI,EAZPH,WAaMI,EAXRH,MAcMC,MAAOE,WAAAA,SAAAA,GAbX,QAASC,GAAeC,EAASC,GAiB/B,GAAAJ,GAAOE,QAAAA,UAAAA,EAAAA,GAfHD,EAAWI,EAASF,EAASH,EA0BjCM,OALHC,GAAUZ,UAELa,EAAAA,OAAAA,QAAwBC,EAAQD,SAGlCF,EAEAI,MAAMR,OApBTK,UAuBoBI,aAAOA,UAAAA,OAAAA,WAAAA,SAAAA,EAAAA,EAAAA,GAtB5B,GAAIH,GAAwBC,EAAQD,uBAAyBC,EAAQG,UACrE,QACEN,SAsBSpB,MArBTyB,OAAO,EACPD,KAwBQG,SAAAA,EAAmBV,EAAAW,GACvB5B,GAAAA,IACEyB,MAAGzB,EAKLA,SAAI6B,SAAaZ,WAAa,cAAA,aAAA,eAAA,kBAAA,YAAA,YAAA,QAAA,UAAA,OAAA,YAAA,cAAA,YAAA,KAAA,cAAA,eAAA,SAAAa,GAC3B9B,QAAQ+B,UAAUF,EAAAA,MAAaf,EAAAgB,GAAAF,EAAAE,KAzBpC,IAAIH,GAAmB,eAiCrB3B,SAAQgC,SAAS,OAAA,YAAS,aAAqBF,SAAAA,GAC7CF,QAAKE,UAAaG,EAASH,KAAKH,EAAmBO,KAAAA,EAAAA,MAAAA,EAAAA,IAAAA,IA9BvD,IAgCMlC,GAAQ+B,EAAUG,KAAAA,cA/BpBlC,SAgCImC,UAAWA,KA/BsBrB,EAAQsB,OAA3CT,EAAiBU,KAAKR,IAA8B,EAA6BA,GAEvF7B,QAAQgC,SAAU,QAAS,WAAa,SAASF,GAmC/CF,EAAKU,IAAAA,EAAab,SAAMc,EAAOX,SAAKU,EAAWJ,GAC7CT,EAAGzB,GAAQwC,EAAAA,YAAoBC,GAC7BzC,QAAQ0C,UAAOjB,IAAOgB,EAAAA,WAjCtBN,GAkCKA,EAAAQ,wBA9BXf,EAkCMO,WAAWA,EAAQQ,OAAAA,EAAAA,UAAAA,SAAAA,EAAAA,GAjCnB3C,QAAQwC,SAASC,GAmClBzC,QAAA0C,OAAAjB,EAAAgB,GAIDhB,EAAIU,QAAYnC,EAEhByC,QAAAA,UAAaP,IAAeU,EAAiBC,WAnC7CV,GAAWA,EAAQQ,sBAwCnB,GArCJf,EAsCIO,QAAQW,EAAAA,OAAYL,EAAAA,OAAAA,SAAAA,EAAAA,GArCjBN,GAAYnC,QAAQ+B,UAAUU,KAyC/BN,QAAUpB,SAASE,KAASH,IAAAA,EAAAA,MAAAA,wBAGhCW,KAAU,EAAYU,EAAAS,OAAAT,EAAAU,UAxCxBjB,EA0CId,UAAUW,EAAAc,OAAAX,EAAAmB,SAAA,SAAAN,GACVN,GAAUnC,QAAA+B,UAAAU,IAzCZN,EAAQW,YAAYL,IAEtB,IAAIN,GAAUpB,EAASE,EAASH,EAChCW,GAAMuB,IAAI,WAAY,WAChBb,GAASA,EAAQc,UACrBnC,EAAU,KACVqB,EAAU","file":"modules/popover.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function($tooltip) {\r\n\r\n      function PopoverFactory(element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if(options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if(angular.isDefined(dataTarget)) {\r\n          if(falseValueRegExp.test(dataTarget))\r\n            options.target = false;\r\n          else\r\n            options.target = dataTarget;\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\r\n              popover && popover.$applyPlacement();\r\n            });\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\r\n            popover && popover.$applyPlacement();\r\n          });\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!popover || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n          newValue === true ? popover.show() : popover.hide();\r\n        });\r\n\r\n        // Viewport support\r\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\r\n          if(!popover || !angular.isDefined(newValue)) return;\r\n          popover.setViewport(newValue);\r\n        });\r\n\r\n        // Initialize popover\r\n        var popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}